// <auto-generated />
using System;
using AlomaCare.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlomaCare.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250619110212_add-maternal2")]
    partial class addmaternal2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlomaCareAPI.Models.Antimicrobial", b =>
                {
                    b.Property<int>("AntimicrobialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AntimicrobialID"));

                    b.Property<string>("AntimicrobialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AntimicrobialID");

                    b.ToTable("Antimicrobials");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.CongenitalInfectionOrganism", b =>
                {
                    b.Property<int>("CongenitalInfectionOrganismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CongenitalInfectionOrganismID"));

                    b.Property<string>("CongenitalInfectionOrganismName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CongenitalInfectionOrganismID");

                    b.ToTable("CongenitalInfectionOrganisms");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.FungalOrganism", b =>
                {
                    b.Property<int>("FungalOrganismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FungalOrganismID"));

                    b.Property<string>("FungalOrganismName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FungalOrganismID");

                    b.ToTable("FungalOrganisms");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.Maternal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbandonedBaby")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AntenatalCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AntenatalMgSulfate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AntenatalSteroid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chorioamnionitis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diabetes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gravidity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HaartBegun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HivProphylaxis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hypertension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaternalHiv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultipleGestations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeonatalAbstinence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBabies")
                        .HasColumnType("int");

                    b.Property<string>("OtherInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Syphilis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyphilisTreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TbTreatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeenageMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Maternals");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.Organism", b =>
                {
                    b.Property<int>("OrganismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganismID"));

                    b.Property<string>("OrganismName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrganismID");

                    b.ToTable("organisms");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.PasswordReset", b =>
                {
                    b.Property<Guid>("PasswordResetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PasswordResetId");

                    b.HasIndex("UserId", "CreatedAtUtc")
                        .HasDatabaseName("IX_PasswordResets_UserId_CreatedAtUtc");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeOnAdmission")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("ApgarTimes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthHivPcr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BirthWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DiedInDeliveryRoom")
                        .HasColumnType("bit");

                    b.Property<bool>("DiedWithin12Hours")
                        .HasColumnType("bit");

                    b.Property<decimal?>("FootLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GestationalAge")
                        .HasColumnType("int");

                    b.Property<decimal?>("HeadCircumference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HospitalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("InitialResuscitation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("InitialTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LengthAtBirth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("MaternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModeOfDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferHospital")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.SonarFinding", b =>
                {
                    b.Property<int>("SonarFindingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SonarFindingID"));

                    b.Property<string>("SonarFindingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SonarFindingID");

                    b.ToTable("SonarFindings");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usernumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AlomaCareAPI.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.Maternal", b =>
                {
                    b.HasOne("AlomaCareAPI.Models.Patient", "Patient")
                        .WithOne("Maternal")
                        .HasForeignKey("AlomaCareAPI.Models.Maternal", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.PasswordReset", b =>
                {
                    b.HasOne("AlomaCareAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.Patient", b =>
                {
                    b.HasOne("AlomaCareAPI.Models.User", "CreatedByUser")
                        .WithMany("Patients")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.UserRole", b =>
                {
                    b.HasOne("AlomaCareAPI.Models.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("AlomaCareAPI.Models.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.Patient", b =>
                {
                    b.Navigation("Maternal");
                });

            modelBuilder.Entity("AlomaCareAPI.Models.User", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
