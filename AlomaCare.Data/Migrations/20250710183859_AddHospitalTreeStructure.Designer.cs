// <auto-generated />
using System;
using AlomaCare.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlomaCare.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250710183859_AddHospitalTreeStructure")]
    partial class AddHospitalTreeStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlomaCare.Models.Antimicrobial", b =>
                {
                    b.Property<int>("AntimicrobialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AntimicrobialID"));

                    b.Property<string>("AntimicrobialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AntimicrobialID");

                    b.ToTable("Antimicrobials");
                });

            modelBuilder.Entity("AlomaCare.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("AlomaCare.Models.CongenitalInfectionOrganism", b =>
                {
                    b.Property<int>("CongenitalInfectionOrganismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CongenitalInfectionOrganismID"));

                    b.Property<string>("CongenitalInfectionOrganismName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CongenitalInfectionOrganismID");

                    b.ToTable("CongenitalInfectionOrganisms");
                });

            modelBuilder.Entity("AlomaCare.Models.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("AlomaCare.Models.FungalOrganism", b =>
                {
                    b.Property<int>("FungalOrganismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FungalOrganismID"));

                    b.Property<string>("FungalOrganismName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FungalOrganismID");

                    b.ToTable("FungalOrganisms");
                });

            modelBuilder.Entity("AlomaCare.Models.HelpResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HelpResources");
                });

            modelBuilder.Entity("AlomaCare.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("HospitalId");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("AlomaCare.Models.Maternal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbandonedBaby")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AntenatalCare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AntenatalMgSulfate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AntenatalSteroid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chorioamnionitis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diabetes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gravidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HaartBegun")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HivProphylaxis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hypertension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaternalHiv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultipleGestations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeonatalAbstinence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBabies")
                        .HasColumnType("int");

                    b.Property<string>("OtherInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Syphilis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyphilisTreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TbTreatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeenageMother")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Maternals");
                });

            modelBuilder.Entity("AlomaCare.Models.Organism", b =>
                {
                    b.Property<int>("OrganismID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganismID"));

                    b.Property<string>("OrganismName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrganismID");

                    b.ToTable("organisms");
                });

            modelBuilder.Entity("AlomaCare.Models.PasswordReset", b =>
                {
                    b.Property<Guid>("PasswordResetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PasswordResetId");

                    b.HasIndex("UserId", "CreatedAtUtc")
                        .HasDatabaseName("IX_PasswordResets_UserId_CreatedAtUtc");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("AlomaCare.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeOnAdmission")
                        .HasColumnType("int");

                    b.Property<string>("AvoidableFactors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthHivPcr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BirthWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionAtBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DiedInDeliveryRoom")
                        .HasColumnType("bit");

                    b.Property<bool>("DiedWithin12Hours")
                        .HasColumnType("bit");

                    b.Property<string>("FiveMinuteApgar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FootLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GestationalAge")
                        .HasColumnType("int");

                    b.Property<string>("GestationalUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("HeadCircumference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Hospital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("InitialResuscitation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("InitialTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LengthAtBirth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModeOfDelivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MothersGtNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeonatalCauseOfDeath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObstetricCauseOfDeath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OneMinuteApgar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SingleOrMultipleBirths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyphilisSerology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenMinuteApgar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferHospital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AlomaCare.Models.PatientCompleteInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbgAvailable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbxDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AeeG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AeeGFindings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AeeGNotDoneReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BacterialInfectionLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BacterialPathogen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BacterialSepsisBeforeDay3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseExcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BetaDGlucan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGasResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodTransfusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BsOrganism")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caffeine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CerebralCooling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CongenitalAnomaly")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CongenitalInfection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CongenitalInfectionOrganism")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingNotDoneReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CranialBefore28")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CribBaseExcess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CribTemp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CribTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CribWeightGa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CysticPvl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefectCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DischargeWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationOfStay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EarlyAntibiotics")
                        .HasColumnType("int");

                    b.Property<string>("EosCalcDone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EosFollowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EosRecommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EosRisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeTransfusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedsOnDischarge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FungalOrganism")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FungalSepsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FungalSepsisLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlucoseAbnormalities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HfEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HfStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HfncHighRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HieGradeSection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HieSection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeOxygen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InotropicSupport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ivh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JaundiceRequirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KangarooCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KmcType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LateSepsisAbx")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorBirthDefect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxBilirubin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetabolicComplications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ncpap2Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ncpap2End")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ncpap2Start")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NcpapDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NcpapEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NcpapNoEtt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NcpapStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NecEnterocolitis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NecSurgery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeonatalSepsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherBacteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSonarFindings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSurgery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutcomeSection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oxygen28")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParenteralNutrition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PdaIbuprofen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PdaLiti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PdaParacetamol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlasmaTransfusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateletTransfusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PneumoLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resp28")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RespSupportAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RespiratoryDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetinopathyPre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RopFindings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RopSurgery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SepsisAfterDay3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SepsisSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeptalNecrosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SonarFindings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifyOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifyOtherAbx")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteroidsCld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurfactantAny")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurfactantInit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeryCode1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeryCode2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeryCode3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeryCode4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SvtDoses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SvtFirstHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SvtFirstMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThomsonScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeNecSurgery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vent1Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vent1End")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vent1Start")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vent2Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vent2End")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vent2Start")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorstIvh")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("PatientCompleteInfos");
                });

            modelBuilder.Entity("AlomaCare.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("AlomaCare.Models.SonarFinding", b =>
                {
                    b.Property<int>("SonarFindingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SonarFindingID"));

                    b.Property<string>("SonarFindingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SonarFindingID");

                    b.ToTable("SonarFindings");
                });

            modelBuilder.Entity("AlomaCare.Models.Suburb", b =>
                {
                    b.Property<int>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuburbId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("SuburbName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuburbId");

                    b.HasIndex("CityId");

                    b.ToTable("Suburb");
                });

            modelBuilder.Entity("AlomaCare.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usernumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AlomaCare.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AlomaCare.Models.City", b =>
                {
                    b.HasOne("AlomaCare.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AlomaCare.Models.Hospital", b =>
                {
                    b.HasOne("AlomaCare.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AlomaCare.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AlomaCare.Models.Suburb", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Province");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("AlomaCare.Models.Maternal", b =>
                {
                    b.HasOne("AlomaCare.Models.Patient", "Patient")
                        .WithOne("Maternal")
                        .HasForeignKey("AlomaCare.Models.Maternal", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AlomaCare.Models.PasswordReset", b =>
                {
                    b.HasOne("AlomaCare.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlomaCare.Models.Patient", b =>
                {
                    b.HasOne("AlomaCare.Models.User", "CreatedByUser")
                        .WithMany("Patients")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("AlomaCare.Models.PatientCompleteInfo", b =>
                {
                    b.HasOne("AlomaCare.Models.Patient", "Patient")
                        .WithOne("PatientCompleteInfo")
                        .HasForeignKey("AlomaCare.Models.PatientCompleteInfo", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AlomaCare.Models.Suburb", b =>
                {
                    b.HasOne("AlomaCare.Models.City", "City")
                        .WithMany("Suburbs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AlomaCare.Models.UserRole", b =>
                {
                    b.HasOne("AlomaCare.Models.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("AlomaCare.Models.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlomaCare.Models.City", b =>
                {
                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("AlomaCare.Models.Patient", b =>
                {
                    b.Navigation("Maternal")
                        .IsRequired();

                    b.Navigation("PatientCompleteInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("AlomaCare.Models.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("AlomaCare.Models.User", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
